name: Deploy (optional Sonar + auto-rollback)

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Which service to deploy?'
        required: true
        type: choice
        options: [java, node, python]
        default: java
      branch:
        description: 'Artifact branch history'
        required: true
        type: choice
        options: [main, develop]
        default: main
      sonar:
        description: 'Run SonarQube analysis? (optional, non-blocking)'
        required: true
        type: choice
        options: [yes, no]
        default: no
      approve:
        description: 'Proceed with deployment?'
        required: true
        type: choice
        options: [yes, no]
        default: yes

permissions:
  contents: read
  actions: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # --------------------------
  # 1. Map service -> workflow + artifact base name
  # --------------------------
  meta:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.map.outputs.artifact_name }}
      workflow_file: ${{ steps.map.outputs.workflow_file }}
    steps:
      - name: Map service
        id: map
        run: |
          svc="${{ github.event.inputs.service }}"
          if [ "$svc" = "java" ]; then
            echo "artifact_name=java-build" >> $GITHUB_OUTPUT
            echo "workflow_file=java-ci.yml" >> $GITHUB_OUTPUT
          elif [ "$svc" = "node" ]; then
            echo "artifact_name=node-build" >> $GITHUB_OUTPUT
            echo "workflow_file=node-ci.yml" >> $GITHUB_OUTPUT
          else
            echo "artifact_name=python-build" >> $GITHUB_OUTPUT
            echo "workflow_file=python-ci.yml" >> $GITHUB_OUTPUT
          fi

  # --------------------------
  # 2. Find the latest and previous successful runs for the chosen CI workflow
  # --------------------------
  resolve_runs:
    needs: [meta]
    runs-on: ubuntu-latest
    outputs:
      latest_run: ${{ steps.pick.outputs.latest_run }}
      previous_run: ${{ steps.pick.outputs.previous_run }}
    steps:
      - name: Pick latest & previous successes
        id: pick
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const workflow_id = '${{ needs.meta.outputs.workflow_file }}';
            const branch = '${{ github.event.inputs.branch }}';
            const res = await github.rest.actions.listWorkflowRuns({
              owner, repo, workflow_id,
              status:'success', branch, per_page:20
            });
            const runs = res.data.workflow_runs.sort((a,b)=>b.run_number-a.run_number);
            if (!runs.length) { core.setFailed(`No successful runs for ${workflow_id} on ${branch}`); return; }
            core.setOutput('latest_run', String(runs[0].run_number));
            core.setOutput('previous_run', runs[1] ? String(runs[1].run_number) : '');

  # --------------------------
  # 3. Download the latest artifact (to deploy)
  # --------------------------
  fetch_latest:
    needs: [meta, resolve_runs]
    runs-on: ubuntu-latest
    steps:
      - name: Download latest artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          run_number: ${{ needs.resolve_runs.outputs.latest_run }}
          name: ${{ needs.meta.outputs.artifact_name }}-${{ needs.resolve_runs.outputs.latest_run }}
          path: fetched_artifact
          if_no_artifact_found: fail
      - name: Show files
        run: ls -R fetched_artifact || true

  # --------------------------
  # 4. Optional Sonar step
  # - If sonar = no ‚Üí skip
  # - If sonar = yes ‚Üí try Sonar if secrets exist, else log & continue
  # - This is NON-BLOCKING (deploy continues regardless)
  # --------------------------
  sonar_optional:
    needs: [fetch_latest]
    runs-on: ubuntu-latest
    steps:
      - name: Skip Sonar (input=no)
        if: ${{ github.event.inputs.sonar == 'no' }}
        run: echo "Sonar skipped. Continuing to deploy."

      - name: Sonar requested but secrets missing
        if: ${{ github.event.inputs.sonar == 'yes' && (secrets.SONAR_HOST_URL == '' || secrets.SONAR_TOKEN == '') }}
        run: echo "Sonar requested but no secrets configured. Skipping Sonar."

      # Uncomment the block below if you add Sonar secrets later
      # - name: SonarQube Scan (non-blocking)
      #   if: ${{ github.event.inputs.sonar == 'yes' && secrets.SONAR_HOST_URL != '' && secrets.SONAR_TOKEN != '' }}
      #   continue-on-error: true
      #   uses: sonarsource/sonarqube-scan-action@v2
      #   env:
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #     SONAR_TOKEN:    ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     projectBaseDir: ${{ github.event.inputs.service }}-app
      #     args: >
      #       -Dsonar.projectKey=${{ github.event.repository.name }}_${{ github.event.inputs.service }}
      #       -Dsonar.sources=.
      #       -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      #       -Dsonar.python.coverage.reportPaths=coverage.xml
      #       -Dsonar.java.binaries=target

  # --------------------------
  # 5. Approval gate (must be yes to deploy)
  # --------------------------
  gate:
    needs: [sonar_optional]
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.chk.outputs.proceed }}
    steps:
      - name: Check approval
        id: chk
        run: |
          if [ "${{ github.event.inputs.approve }}" = "yes" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "proceed=false" >> $GITHUB_OUTPUT
            echo "Approval not granted. Stopping."
          fi

  # --------------------------
  # 6. Attempt deploy (placeholder)
  # - Replace this with your real deploy commands (helm/kubectl/az/etc.)
  # --------------------------
  deploy_latest:
    needs: [gate, meta, resolve_runs]
    if: ${{ needs.gate.outputs.proceed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download latest artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          run_number: ${{ needs.resolve_runs.outputs.latest_run }}
          name: ${{ needs.meta.outputs.artifact_name }}-${{ needs.resolve_runs.outputs.latest_run }}
          path: fetched_artifact
          if_no_artifact_found: fail
      - name: Deploy latest (replace with real commands)
        run: |
          echo "üöÄ Deploying '${{ github.event.inputs.service }}' from run #${{ needs.resolve_runs.outputs.latest_run }}"
          ls -R fetched_artifact || true
          # --- Replace with real deploy ---
          # Example: helm upgrade --install <release> ./chart --set image.tag=<tag>
          # Example: az webapp deploy ...
          # Example: scp + systemctl restart ...
          # exit 1   # <- uncomment to simulate failure for testing rollback
          echo "‚úÖ Latest deployment completed."

  # --------------------------
  # 7. Auto-rollback if deploy failed and previous success exists
  # --------------------------
  rollback:
    needs: [deploy_latest, meta, resolve_runs]
    if: ${{ needs.deploy_latest.result == 'failure' && needs.resolve_runs.outputs.previous_run != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download previous artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          run_number: ${{ needs.resolve_runs.outputs.previous_run }}
          name: ${{ needs.meta.outputs.artifact_name }}-${{ needs.resolve_runs.outputs.previous_run }}
          path: fetched_artifact_prev
          if_no_artifact_found: fail
      - name: Deploy rollback (replace with real commands)
        run: |
          echo "‚è™ Rolling back '${{ github.event.inputs.service }}' to run #${{ needs.resolve_runs.outputs.previous_run }}"
          ls -R fetched_artifact_prev || true
          # --- Replace with real rollback deploy ---
          # Example: helm rollback <release> <revision>
          echo "‚úÖ Rollback completed."

  # --------------------------
  # 8. If deploy failed and no rollback available
  # --------------------------
  no_previous_to_rollback:
    needs: [deploy_latest, resolve_runs]
    if: ${{ needs.deploy_latest.result == 'failure' && needs.resolve_runs.outputs.previous_run == '' }}
    runs-on: ubuntu-latest
    steps:
      - name: No rollback possible
        run: |
          echo "‚ùå Deploy failed and no previous successful artifact to roll back to."
          exit 1
