name: Deploy (optional Sonar + auto-rollback)

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Which service to deploy?'
        required: true
        type: choice
        options: [java, node, python]
        default: java
      branch:
        description: 'Artifact branch history'
        required: true
        type: choice
        options: [main, develop]
        default: main
      sonar:
        description: 'Run SonarQube analysis? (optional, non-blocking)'
        required: true
        type: choice
        options: [yes, no]
        default: no
      approve:
        description: 'Proceed with deployment?'
        required: true
        type: choice
        options: [yes, no]
        default: yes

permissions:
  contents: read
  actions: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.map.outputs.artifact_name }}
      workflow_file: ${{ steps.map.outputs.workflow_file }}
    steps:
      - name: Map service
        id: map
        run: |
          svc="${{ github.event.inputs.service }}"
          if [ "$svc" = "java" ]; then
            echo "artifact_name=java-build" >> $GITHUB_OUTPUT
            echo "workflow_file=java-ci.yml" >> $GITHUB_OUTPUT
          elif [ "$svc" = "node" ]; then
            echo "artifact_name=node-build" >> $GITHUB_OUTPUT
            echo "workflow_file=node-ci.yml" >> $GITHUB_OUTPUT
          else
            echo "artifact_name=python-build" >> $GITHUB_OUTPUT
            echo "workflow_file=python-ci.yml" >> $GITHUB_OUTPUT
          fi

  resolve_runs:
    needs: [meta]
    runs-on: ubuntu-latest
    outputs:
      latest_run: ${{ steps.pick.outputs.latest_run }}
      previous_run: ${{ steps.pick.outputs.previous_run }}
    steps:
      - name: Pick latest & previous successes
        id: pick
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const workflow_id = '${{ needs.meta.outputs.workflow_file }}';
            const branch = '${{ github.event.inputs.branch }}';
            const res = await github.rest.actions.listWorkflowRuns({
              owner, repo, workflow_id, status:'success', branch, per_page:20
            });
            const runs = res.data.workflow_runs.sort((a,b)=>b.run_number-a.run_number);
            if (!runs.length) { core.setFailed(`No successful runs for ${workflow_id} on ${branch}`); return; }
            core.setOutput('latest_run', String(runs[0].run_number));
            core.setOutput('previous_run', runs[1] ? String(runs[1].run_number) : '');

  fetch_latest:
    needs: [meta, resolve_runs]
    runs-on: ubuntu-latest
    steps:
      # Try exact artifact name from the CI run (e.g., java-build-15)
      - name: Download latest artifact (exact name)
        id: fetch_exact
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ${{ needs.meta.outputs.workflow_file }}  # constrain to the right workflow file
          run_number: ${{ needs.resolve_runs.outputs.latest_run }}
          name: ${{ needs.meta.outputs.artifact_name }}-${{ needs.resolve_runs.outputs.latest_run }}
          path: fetched_artifact
          if_no_artifact_found: fail

      # Fallback: download any artifacts from that run if exact name wasn't found
      - name: Download latest artifact (fallback: any)
        if: ${{ steps.fetch_exact.outcome != 'success' }}
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ${{ needs.meta.outputs.workflow_file }}
          run_number: ${{ needs.resolve_runs.outputs.latest_run }}
          path: fetched_artifact
          if_no_artifact_found: fail

      - name: Show files
        run: ls -R fetched_artifact || true

  sonar_optional:
    needs: [fetch_latest]
    runs-on: ubuntu-latest
    steps:
      - name: Skip Sonar (input=no)
        if: ${{ github.event.inputs.sonar == 'no' }}
        run: echo "Sonar skipped. Continuing to deploy."
      - name: Sonar requested (secrets not wired here) — continuing
        if: ${{ github.event.inputs.sonar == 'yes' }}
        run: |
          echo "Sonar requested. This workflow is secrets-free, so Sonar is skipped."
          echo "To enable later, add SONAR_HOST_URL and SONAR_TOKEN secrets and uncomment scan steps."

  gate:
    needs: [sonar_optional]
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.chk.outputs.proceed }}
    steps:
      - name: Check approval
        id: chk
        run: |
          if [ "${{ github.event.inputs.approve }}" = "yes" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "proceed=false" >> $GITHUB_OUTPUT
            echo "Approval not granted. Stopping."
          fi

  deploy_latest:
    needs: [gate, meta, resolve_runs]
    if: ${{ needs.gate.outputs.proceed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # Try exact-name first; fallback to all if needed (mirror of fetch_latest)
      - name: Download latest artifact (exact)
        id: dl_exact
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ${{ needs.meta.outputs.workflow_file }}
          run_number: ${{ needs.resolve_runs.outputs.latest_run }}
          name: ${{ needs.meta.outputs.artifact_name }}-${{ needs.resolve_runs.outputs.latest_run }}
          path: fetched_artifact
          if_no_artifact_found: fail

      - name: Download latest artifact (fallback: any)
        if: ${{ steps.dl_exact.outcome != 'success' }}
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ${{ needs.meta.outputs.workflow_file }}
          run_number: ${{ needs.resolve_runs.outputs.latest_run }}
          path: fetched_artifact
          if_no_artifact_found: fail

      - name: Deploy latest (replace with real commands)
        run: |
          echo "🚀 Deploying '${{ github.event.inputs.service }}' from run #${{ needs.resolve_runs.outputs.latest_run }}"
          ls -R fetched_artifact || true
          # --- Replace with real deploy ---
          # helm upgrade --install ...
          # az webapp deploy ...
          # scp + systemctl restart ...
          # exit 1   # <- simulate failure to test rollback
          echo "✅ Latest deployment completed."

  rollback:
    needs: [deploy_latest, meta, resolve_runs]
    if: ${{ needs.deploy_latest.result == 'failure' && needs.resolve_runs.outputs.previous_run != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download previous artifact (exact)
        id: dl_prev_exact
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ${{ needs.meta.outputs.workflow_file }}
          run_number: ${{ needs.resolve_runs.outputs.previous_run }}
          name: ${{ needs.meta.outputs.artifact_name }}-${{ needs.resolve_runs.outputs.previous_run }}
          path: fetched_artifact_prev
          if_no_artifact_found: fail

      - name: Download previous artifact (fallback: any)
        if: ${{ steps.dl_prev_exact.outcome != 'success' }}
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ${{ needs.meta.outputs.workflow_file }}
          run_number: ${{ needs.resolve_runs.outputs.previous_run }}
          path: fetched_artifact_prev
          if_no_artifact_found: fail

      - name: Deploy rollback (replace with real commands)
        run: |
          echo "⏪ Rolling back '${{ github.event.inputs.service }}' to run #${{ needs.resolve_runs.outputs.previous_run }}"
          ls -R fetched_artifact_prev || true
          # --- Replace with real rollback deploy ---
          echo "✅ Rollback completed."

  no_previous_to_rollback:
    needs: [deploy_latest, resolve_runs]
    if: ${{ needs.deploy_latest.result == 'failure' && needs.resolve_runs.outputs.previous_run == '' }}
    runs-on: ubuntu-latest
    steps:
      - name: No rollback possible
        run: |
          echo "❌ Deploy failed and no previous successful artifact to roll back to."
          exit 1
